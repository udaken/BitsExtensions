<#@ template debug="false" hostspecific="false" language="C#"#>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
#pragma warning disable IDE0046
using System;
using System.Runtime.CompilerServices;

namespace BitsExtensions
{
    public static partial class Bits
    {
<# foreach (var typePair in new [] {
    (Signed: "int", Unigned: "uint"),
    (Signed: "short", Unigned: "ushort"),
    (Signed: "long", Unigned: "ulong"),
    (Signed: "sbyte", Unigned: "byte"),
}) {
    #>
        #region <#= typePair.Item1 #>/<#= typePair.Item2 #>

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static bool GetBitAsBool(this <#= typePair.Item2 #> value, Index index)
        {
            var offset = index.IsFromEnd ? (sizeof(<#= typePair.Item1 #>) * 8) - index.Value : index.Value;
            const <#= typePair.Item2 #> One = (<#= typePair.Item2 #>)1U;
            return (value & (One << (offset - 1))) != 0;
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static bool GetBitAsBool(this <#= typePair.Item1 #> value, Index index) => GetBitAsBool((<#= typePair.Item2 #>)value, index);

        public static bool GetBitAsBoolChecked(this <#= typePair.Item2 #> value, Index index)
        {
            if (index.Value >= (sizeof(<#= typePair.Item2 #>) * 8))
                throw new ArgumentOutOfRangeException(nameof(index));
            return GetBitAsBoolChecked(value, index);
        }

        public static bool GetBitAsBoolChecked(this <#= typePair.Item1 #> value, Index index) => GetBitAsBoolChecked((<#= typePair.Item2 #>)value, index);

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static <#= typePair.Item2 #> GetBits(this <#= typePair.Item2 #> value, Range range)
        {
            var start = range.Start.IsFromEnd ? (sizeof(<#= typePair.Item1 #>) * 8) - range.Start.Value : range.Start.Value;
            var end = range.End.IsFromEnd ? (sizeof(<#= typePair.Item1 #>) * 8) - range.End.Value : range.End.Value;
            var count = end - start -1;
            const <#= typePair.Item2 #> One = (<#= typePair.Item2 #>)1U;
            return (<#= typePair.Item2 #>)((value >> start) & ((One << count) - 1));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static <#= typePair.Item2 #> GetBits(this <#= typePair.Item1 #> value, Range range) => GetBits((<#= typePair.Item2 #>)value, range);

        public static <#= typePair.Item2 #> GetBitsChecked(this <#= typePair.Item2 #> value, Range range)
        {
            if (range.Start.Value >= (sizeof(<#= typePair.Item2 #>) * 8) || range.End.Value >= (sizeof(<#= typePair.Item2 #>) * 8))
                throw new ArgumentOutOfRangeException(nameof(range));
            return GetBits(value, range);
        }

        public static <#= typePair.Item2 #> GetBitsChecked(this <#= typePair.Item1 #> value, Range range) => GetBitsChecked((<#= typePair.Item2 #>)value, range);

        #endregion

<#
    }
#>
    }
}


